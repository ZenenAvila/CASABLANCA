<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIACFFwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAAF0xJ
        REFUeNrt3WuUndV93/Hvfz/nzIyuSEhCIGlG4iLsIuOqjsEO2MgzkpAgpSttl0njuo5dt3VdNMLgxsla
        7gst3BeNU4daGpadlZVL4zptaNqmdQKISDOISwI4aQ128EVcdJdA6IIuczvn2f++2GcEbhoHofMcPefM
        77MWy1rgpX2e5+z9O89l7/8GERERERERERERERERERERERERERERERERERERERERERERERERERERERER
        EREREREREREREREREREREREREREREREREREREREREREREREREREREZFOZtPxoL/+WC8zuiKnxsN0PQVy
        bgQ4s2bVmJjI+OyHDyoAOtWDD8KBy6+hqz6BY0Q3MvKqW5gHXIGxELgEZxYQANfo6Li+HoFR4KTD6waH
        sXgyxqwWzMGdWrWbZUde5M47FQAdY+vw8nMHG+K4xdDTBz4A3AysBnqBbqAKZNPlvExDDuRADZgA9gPP
        AU9hDFOv7yWr+lTybx7YqwBo64G/s5dKJZDnzkwfY9RmXAf8E+AO4NrGgBepAbuB/wV8Y6aPvTBqM8gy
        o16PbF67XwHQboZG0q++uwM+H+wTwGeBd6m/y0/wQ+Br4L8LdsIsDZFN/Z15NdCRAbBtpBczI+aOma0E
        /i3w99Evvrw9NeB/AP/G3XeHzHB3Bvs770qg4wJgaKQPzPE8A4s3APeT7vVFztdTwD14+LZlObixqX9f
        Rx1g6KSD2TICsTJJzA0sXg8MafDLBbgZGMLi9TE3YmWSLSOddYAdFQCX+VWEWjfBvBf4CnCj+rBcoBuB
        rwTz3lDr5jK/SgFQRlt39FGnRrS86tg9wHr1XWmS9Y7dEy2v1qmxdUefAqBsvB4JmWEeNgCfVJ+VJvuk
        edgQMsPrUQFQJg/sWk7oCnidS4C7gPnqr9Jk84G7vM4loSvwwK7lCoCyqHYF3AHjFvTQT4pzM8Yt7qnP
        KQBKYmI8xwLdwM8Bc9RPpSBzgJ+zQPfEeK4AKIOh4RVphrezElijPioFW4NzLd7oewqAi38AkQiwDlii
        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
        wK4lVLpOUxufjztkGVme8w+Afwdc1eTmHnLnHwGnNzdxBWw7BQDAMeC3gN8Kmb0Yc+pT676twPXfPnWa
        DKCS4fWrSPse/nNgscbhRfUq8BvA72KVl83ruZ/r3C3oExghoxJzvwb4p41/FhTQZCEB0G4FQRYAvwj8
        bMz9MRrVXwx/o5CdE9/8tgMwF2cJ1G8A+oFrKe2riWllMfBF4KN4fcRTZaBDwKki+4S5B8cuAV8ac24E
        PkIbFodp15qAKxv/fAoYc6yGt6T+Ww+61y8jI92GvQv4NDAO1NytVXUi27a2ZrsXBa2gIp3y46oopN82
        lQUXUQCIiAJARBQAIqIAEBEFgIgoAEREASAiCgARUQCIiAJARBQAIqIAEBEFgIgoAEREASAiCgARUQCI
        iAJARBQAIqIAEBEFgIgoAEREASAiCgARKUC77wz0Tr0I/FdgAu3vN9050A18FLhGATA97CbyJQJj6v9C
        ZAaB1QqA6SNgVHHGBpu41bK0n207+8CoMk1vh/UMQGQaUwCIKABERAEgIgoAEVEAiIgCQEQUACKiABAR
        BYCIKABERAEgIgoAEVEAiIgCQEQUACKiABARBYCIKABERAEgIgoAEVEAiIgCQEQUACKiABCRdgoAtwhM
        lvy4Jx2L+voFoNEXSt9nG2OrvAFgbviZmaPA3pKfzL2Oj2pbUMHA8fbos2dmjpo3t9M2NQBWjS0gzD3r
        wHNAvaQnMgeeD0aMc49pAExzce4xghGB5xt9o4zqwHNh7llfNbagvAGwu+fk1B8fAZ4o6cl80rGHAGx0
        jkbANDfVBxp94smSfswnGmPqrWOsfAHwmfUvk2cZhh/G/D7ghZKdyB8A95nHg2SBzbcc0QiY5jbfcgSy
        gHk8CNzX6CNl8gLm9xl+OM8yPrP+5fIGAECIEcfYz8LHDD4GfAPYD5wmPWhp9T+ngQPANw1+frB/37CF
        ANHV+yWJjoXAYP++YYOfB77Z6DMXs8/uB75h8LH9LHzMMUJs/nPrQh6DDQ33vnluzWaYsxTsGvBFjTZb
        MfpSO8brOLtxP2hmY97414MD+9Tx5Zxtw32AYTjuPgOzpRgrcRa2vM9iR8FfdONgcB+b+o+bBva3RwAA
        3D+ygifnXMmaUy+V5mH7RG2CrkoXm9fuL8knkjLZurOXyfok3dXuUnweB3bNvZoPnX6Fe/r36AsSERER
        ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
        ERERERERERERERERERERERERETlv/xeTz6CkkcnyEQAAAABJRU5ErkJggg==
</value>
  </data>
</root>